<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>📓 Diary on SwimmingLiu&#39;s Blog</title>
    <link>https://swimmingliu.cn/categories/diary/</link>
    <description>Recent content in 📓 Diary on SwimmingLiu&#39;s Blog</description>
    <image>
      <title>SwimmingLiu&#39;s Blog</title>
      <url>https://swimmingliu.cn/papermod-cover.png</url>
      <link>https://swimmingliu.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Feb 2024 19:30:06 +0800</lastBuildDate><atom:link href="https://swimmingliu.cn/categories/diary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>YOLOSHOW - YOLOv5/YOLOv7/YOLOv8/YOLOv9/RTDETR GUI based on Pyside6</title>
      <link>https://swimmingliu.cn/posts/diary/yoloshow/</link>
      <pubDate>Sun, 18 Feb 2024 19:30:06 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/yoloshow/</guid>
      <description>Introduction YOLOSHOW is a graphical user interface (GUI) application embed withYOLOv5 YOLOv7 YOLOv8 YOLOv9 RT-DETR algorithm.
English &amp;nbsp; | &amp;nbsp; 简体中文 Demo Video YOLOSHOW v1.x : YOLOSHOW-YOLOv9/YOLOv8/YOLOv7/YOLOv5/RTDETR GUI
YOLOSHOW v2.x : YOLOSHOWv2.0-YOLOv9/YOLOv8/YOLOv7/YOLOv5/RTDETR GUI
Todo List Add YOLOv9 Algorithm Adjust User Interface (Menu Bar) Complete Rtsp Function Support Instance Segmentation （ YOLOv5 &amp;amp; YOLOv8 ） Add RT-DETR Algorithm ( Ultralytics repo) Add Model Comparison Mode（VS Mode） Support Pose Estimation （YOLOv8 ） Tracking &amp;amp; Counting ( Industrialization ) Functions 1.</description>
    </item>
    
    <item>
      <title>YOLOSHOW 中文版 - YOLOv5/YOLOv7/YOLOv8/YOLOv9/RTDETR GUI based on Pyside6</title>
      <link>https://swimmingliu.cn/posts/diary/yoloshow-cn/</link>
      <pubDate>Sun, 18 Feb 2024 19:30:06 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/yoloshow-cn/</guid>
      <description>介绍 YOLOSHOW 是一款集合了 YOLOv5 YOLOv7 YOLOv8 YOLOv9 RT-DETR
English &amp;nbsp; | &amp;nbsp; 简体中文 演示视频 YOLOSHOW v1.x : YOLOSHOW-YOLOv9/YOLOv8/YOLOv7/YOLOv5/RTDETR GUI
YOLOSHOW v2.x : YOLOSHOWv2.0-YOLOv9/YOLOv8/YOLOv7/YOLOv5/RTDETR GUI
待做清单 加入 YOLOv9 算法 调整UI (菜单栏) 完成Rtsp功能 支持实例分割 （ YOLOv5 &amp;amp; YOLOv8 ） 加入 RT-DETR 算法 ( Ultralytics 仓库) 加入模型对比模式（VS Mode） 支持姿态估计 （ YOLOv8 ） 追踪和计数模型 ( 工业化 ) 功能 1. 支持 图片 / 视频 / 摄像头 / 文件夹（批量） 目标检测 选择左侧菜单栏的图片 / 视频 / 摄像头 / 文件夹（批量）进行目标检测</description>
    </item>
    
    <item>
      <title>ZSTU服务器使用教程 (Yang Li Lab)</title>
      <link>https://swimmingliu.cn/posts/diary/zstu_server_manuscript/</link>
      <pubDate>Fri, 05 Jan 2024 13:47:03 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/zstu_server_manuscript/</guid>
      <description>安装 Xshell 和 Xftp https://www.netsarang.com/en/xshell-download/ # Xshell下载连接 https://blog.csdn.net/m0_67400972/article/details/125346023 # 安装教程 添加Xshell连接 其中 server.ip 为服务器公网ip地址，端口为 6969
安装Anaconda3 每个用户均被分配 AnacondaAnaconda3-2023.07-1-Linux-x86_64.sh 于主目录
bash AnacondaAnaconda3-2023.07-1-Linux-x86_64.sh # 安装anaconda3 输入 yes 后， 再按回车键 即可
初始化Anaconda3 conda init bash	# 初始化conda 然后重新使用Xshell 连接即可
Magic Network 下载外网文件、克隆Github项目等操作，必须使用Magic Network
export http_proxy=http://127.0.0.1:7890 export https_proxy=http://127.0.0.1:7890 取消Magic Network
unset http_proxy unset https_proxy 如果使用上面的命令，不能连接Google. 需要远程桌面连接，打开CFW (默认是打开的)
nohup bash /home/dell/LYJ/Clash/cfw &amp;gt; cfw.out 国内镜像下载 pip 清华源下载
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple packge # packge为包名 conda 配置镜像</description>
    </item>
    
    <item>
      <title>ZSTU Server Management</title>
      <link>https://swimmingliu.cn/posts/diary/zstu_server_management/</link>
      <pubDate>Thu, 04 Jan 2024 21:36:25 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/zstu_server_management/</guid>
      <description>FRP配置 跳板机 # frps.ini 配置 [common] bind_port = 7000 #frps服务监听的端口 token = 123 # 链接口令 ./frps -c frps.ini # 启动frps 服务器 # frpc.ini [common] server_addr = x.x.x.x # 此处为 跳板机 的公网ip server_port = 7000 # 跳板机上frps服务监听的端口 token = 123 # 链接口令 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 # 需要暴露的内网机器的端口 remote_port = 6000 # 暴露的内网机器的端口在vps上的端口 SSH连接 ssh -p 6000 swimmingliu@server.ip # 普通ssh 连接 ssh swimmingliu@server.ip 6000	# xshell ssh连接 用户管理 添加用户 sudo adduser xxx 删除用户 sudo deluser xxx Magic Network export http_proxy=http://127.</description>
    </item>
    
    <item>
      <title>MovieKGQA: 基于知识图谱和neo4j图数据库的电影知识问答系统</title>
      <link>https://swimmingliu.cn/posts/diary/2023-moviekgqa/</link>
      <pubDate>Tue, 12 Dec 2023 12:18:57 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/2023-moviekgqa/</guid>
      <description>Introduction 基于知识图谱和neo4j图数据库的电影知识问答系统
Workflow DataBase 爬取豆瓣TOP1000电影信息数据
Frontend 获取用户输入的信息 （语音输入 / 文本输入） 向电影知识问答后端服务器发送请求 获取返回结果 (成功 -&amp;gt; 4 / 失败 -&amp;gt; 5) 如果返回结果包含image信息，则显示图片和文字，否则只显示文字 请求基于gpt的AI模型服务器，并显示返回结果 Backend ​	[准备工作] 训练 TF-IDF 向量算法和朴素贝叶斯分类器，用于预测用户文本所属的问题类别
接受前端请求，获取用户输入信息 使用分词库解析用户输入的文本词性，提取关键词 根据贝叶斯分类器，分类出用户文本的问题类型 结合关键词与问题类别，在 Neo4j 中查询问题的答案 返回查询结果 （若问题类型为 演员信息 / 电影介绍，则附加图片url） WorkFlow Graph Frame DataBase Frontend Backend Reference Frontend 微信小程序：微信聊天机器人
BackEnd 基于知识图谱的电影知识问答系统
电影知识库问答机器人</description>
    </item>
    
    <item>
      <title>程序设计作业接口文档</title>
      <link>https://swimmingliu.cn/posts/diary/2023-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 02 Dec 2023 21:40:07 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/2023-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BD%9C%E4%B8%9A%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid>
      <description>程序设计作业接口文档 统一返回格式
{ code: ...,	# 状态码 msg: ...,	# 描述信息 data: { # 数据 ... } } code = { 200 == 成功, 500 == 失败, } msg = { success == 成功 fail == 失败 ... } data = { key : value } 前端 虚拟换衣功能 @请求格式 （请求后端） # 前后端需统一样例图片id { userId: ...&amp;lt;int&amp;gt;,	# 标识哪个用户的请求 isUploadCloth: ...&amp;lt;bool&amp;gt;, # 若上传衣服图片使用base64，否则用id isUploadPerson: ...&amp;lt;bool&amp;gt;, # 若上传人物图片使用base64，否则用id clothData: ...&amp;lt;base64||null&amp;gt;, # 衣服图片base64编码 personData: .</description>
    </item>
    
    <item>
      <title>地大服务器使用教程</title>
      <link>https://swimmingliu.cn/posts/diary/2023-%E5%9C%B0%E5%A4%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 20 Nov 2023 12:25:57 +0800</pubDate>
      
      <guid>https://swimmingliu.cn/posts/diary/2023-%E5%9C%B0%E5%A4%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>地大服务器使用教程 1. 服务器环境介绍 NVIDIA RTX 3090 (24GB) NVIDIA RTX 2080 Ti (11GB) 2. 配置实验环境 2.1 Conda环境安装 每位同学都会分配个人用户，大家在自己的用户上使用Conda进行环境配置。
Conda安装教程：https://blog.csdn.net/JineD/article/details/129507719
大家按照教程步骤安装即可, 由于安装时间较长, 视频中暂不进行演示。
2.2 Conda环境配置 （以YOLOv8为例） # 创建conda环境 名为yolov8_lyj python版本为3.9 conda create -n yolov8_lyj python=3.9 # 激活环境 conda activate yolov8_lyj # 选择合适的路径，克隆github项目代码 git clone https://github.com/ultralytics/ultralytics # 进入到项目路径下 cd ultralytics/ # 安装相关依赖包 pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple 2.3 准备数据集 下载需要训练的数据集 （最好找顶刊/顶会论文中的公开数据集）
按照算法指定的数据集格式，对数据集格式进行调整。
​	目标检测中数据集格式之间的相互转换：（VOC、COCO、YOLO格式）
​	https://zhuanlan.zhihu.com/p/461488682
2.4 开始实验 在算法中指定数据集的存放路径 （相对/绝对路径均可）
初始化算法的参数
batch-size 批处理大小：每一次处理图片的个数，根据显卡内存进行调整epochs	迭代次数：算法总共需要训练的轮次workers 载入数据进程数：每一次调用多少个进程来载入数据device 选择显卡设备： &amp;#39;0&amp;#39;使用3090，&amp;#39;1&amp;#39;使用2080ti，&amp;#39;0,1&amp;#39;使用两张卡 开始训练 # 运行训练代码 python mian.</description>
    </item>
    
  </channel>
</rss>
